// Autogenerated by Symvasi generator ({{ appVersion }})
// 
// DO NOT EDIT THIS FILE!

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Symvasi.Runtime;
using Symvasi.Runtime.Service;
using Symvasi.Runtime.Transport;
using Symvasi.Runtime.Protocol;

namespace {{upperCaseFirst namespace}}
{
    {{#each enums}}
    public enum {{upperCaseFirst name}}
    {
        {{#each values}}
        {{upperCaseFirst .}}{{#unless @last}},{{/unless}}
        {{/each}}
    }
    {{/each}}
    
    {{#each models}}
    public class {{upperCaseFirst name}} : AModel
    {
        public static readonly string[] Properties = new string[]
        {
            {{#each properties}}
            "{{upperCaseFirst name}}"{{#unless @last}},{{/unless}}
            {{/each}}
        };
        
        {{#each properties}}
        private {{>typeReference dataType=type}} _{{lowerCaseFirst name}};
        {{/each}}
        
        {{#each properties}}
        public {{> typeReference dataType=type}} {{upperCaseFirst name}}
        {
            get
            {
                return this._{{lowerCaseFirst name}};
            }
            set
            {
                this._{{lowerCaseFirst name}} = value;
            }
        }
        {{/each}}
        
        public {{upperCaseFirst name}}()
            : base()
        {
        }
        
        public override string[] GetProperties()
        {
            return {{upperCaseFirst name}}.Properties;
        }
        
        public override void Write(IProtocol protocol)
        {
            base.Write(protocol);
            
            {{#each properties}}
            protocol.WriteModelPropertyStart("{{name}}", "{{type}}", {{>nullCheck source=(format "this.%s" (upperCaseFirst name))}});
            {{>writePropertyValue source=(format "this.%s" (upperCaseFirst name))}}
            protocol.WriteModelPropertyEnd();
            {{#unless @last}}
            
            {{/unless}}
            {{/each}}
        }
        protected override bool ReadPropertyValue(IProtocol protocol, IPropertyHeader prop)
        {
            switch (prop.Name)
            {
                {{#each properties}}
                case "{{name}}":
                    {
                        this.ValidateProp(prop, "{{type}}");
                        if (prop.IsNull)
                        {
                            {{>nullSet source=(format "this.%s" (upperCaseFirst name))}}
                        }
                        else
                        {
                            {{>readPropertyValue source=(format "this.%s" (upperCaseFirst name))}}
                        }
                        
                        return true;
                    }
                {{/each}}
                default:
                    return base.ReadPropertyValue(protocol, prop);
            }
        }
    }
    {{/each}}
    
    {{#each services}}
    public class {{upperCaseFirst name}}Client : AServiceClient
    {
        public {{upperCaseFirst name}}Client(IClientTransport transport, IClientProtocol protocol)
            : base(transport, protocol)
        {
        }
        
        {{#each methods}}
        public {{#if returnType}}{{> typeReference dataType=returnType}}{{else}}void{{/if}} {{upperCaseFirst name~}}
            ({{#each params}}{{> typeReference dataType=type}} {{name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            var protocol = this.Protocol;
            {{#if returnType}}
            
            {{> typeReference dataType=returnType}} result;
            {{/if}}
            
            protocol.WriteRequestStart("{{name}}");
            
            {{#each params}}
            protocol.WriteRequestArgumentStart("{{name}}", "{{type}}");
            {{> writePropertyValue source=name}}
            protocol.WriteRequestArgumentEnd();
            {{#unless @last}}
            
            {{/unless}}
            {{/each}}
            
            protocol.WriteRequestEnd();
            
            var response = protocol.ReadResponseStart();
            if (response.IsValid)
            {
                {{#if returnType}}
                {{>readPropertyValue type=returnType source="result"}}
                
                {{/if}}
                protocol.ReadResponseEnd();
                {{#if returnType}}
                
                return result;
                {{/if}}
            }
            else
            {
                var error = protocol.ReadError();
                protocol.ReadResponseEnd();
                
                throw error.CreateException();
            }
        }
        {{/each}}
    }
    public class {{upperCaseFirst name}}Consumer : AServiceConsumer<{{upperCaseFirst name}}Client>
    {
        public {{upperCaseFirst name}}Consumer(Func<IClientTransport> transportFactory, Func<IClientTransport, IClientProtocol> protocolFactory, Func<IClientTransport, IClientProtocol, {{upperCaseFirst name}}Client> clientFactory)
            : base(transportFactory, protocolFactory, clientFactory)
        {
        }
        
        {{#each methods}}
        public {{#if returnType}}{{> typeReference dataType=returnType}}{{else}}void{{/if}} {{upperCaseFirst name~}}
            ({{#each params}}{{> typeReference dataType=type}} {{name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            var client = this.SpawnClient();
            
            {{#if returnType}}return {{/if}}client.{{upperCaseFirst name}}({{#each params}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
        }
        public {{#if returnType}}Task<{{> typeReference dataType=returnType}}>{{else}}Task{{/if}} {{format "%sAsync" (upperCaseFirst name)~}}
            ({{#each params}}{{> typeReference dataType=type}} {{name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            return Task.Run{{#if returnType}}<{{> typeReference dataType=returnType}}>{{/if}}(() => this.{{upperCaseFirst name}}({{#each params}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}));
        }
        {{#unless @last}}
        
        {{/unless}}
        {{/each}}
    }
    
    public class {{upperCaseFirst name}}Server : AServiceServer
    {
        public I{{upperCaseFirst name}}Handler Handler
        {
            get;
            private set;
        }
        
        public {{upperCaseFirst name}}Server(IServerTransport transport, IServerProtocol protocol, I{{upperCaseFirst name}}Handler handler)
            : base(transport, protocol)
        {
            this.Handler = handler;
        }
        
        public override void HandleRequest(IRequestHeader request)
        {
            var protocol = this.Protocol;
            
            switch (request.Method)
            {
                {{#each methods}}
                case "{{name}}":
                    try
                    {
                        {{#each params}}
                        {{>typeReference dataType=type}} {{name}};
                        {
                            protocol.ReadRequestArgumentStart();
                            {{>readPropertyValue source=name}}
                            protocol.ReadRequestArgumentEnd();
                        }
                        {{/each}}
                        
                        protocol.ReadRequestEnd();
                        
                        {{#if returnType}}
                        var result = this.Handler.{{upperCaseFirst name~}}
                            ({{#each params}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
                        
                        protocol.WriteResponseStart(true);
                        {{>writePropertyValue type=returnType source="result"}}
                        protocol.WriteResponseEnd();
                        {{else}}
                        this.Handler.{{upperCaseFirst name~}}
                            ({{#each params}}{{name}}{{#unless @last}}, {{/unless}}{{/each}});
                        
                        protocol.WriteResponseStart(true);
                        protocol.WriteResponseEnd();
                        {{/if}}
                    }
                    catch (Exception ex)
                    {
                        protocol.WriteResponseStart(false);
                        protocol.WriteError(ex);
                        protocol.WriteResponseEnd();
                    }
                    
                    break;
                {{/each}}
                default:
                    protocol.ReadRequestEnd();
                    
                    var exception = new Exception("Service method '" + request.Method + "' not recognized");
                    
                    protocol.WriteResponseStart(false);
                    protocol.WriteError(exception);
                    protocol.WriteResponseEnd();
                    
                    break;
            }
        }
    }
    public class {{upperCaseFirst name}}Director : AServiceDirector<{{upperCaseFirst name}}Server>
    {
        public {{upperCaseFirst name}}Director(Func<IServerTransport> transportFactory, Func<IServerTransport, IServerProtocol> protocolFactory, Func<IServerTransport, IServerProtocol, {{upperCaseFirst name}}Server> serverFactory)
            : base(transportFactory, protocolFactory, serverFactory)
        {
        }
    }
    
    public interface I{{upperCaseFirst name}}Handler
    {
        {{#each methods}}
        {{#if returnType}}{{>typeReference dataType=returnType}}{{else}}void{{/if}} {{upperCaseFirst name~}}
            ({{#each params}}{{>typeReference dataType=type}} {{name}}{{#unless @last}}, {{/unless}}{{/each}});
        {{/each}}
    }
    {{/each}}
}